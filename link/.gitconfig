[alias]
  # Routine Shortcuts #
  br = branch
  ci = commit
  co = checkout
  df = diff
  st = status

  # Experience Improvement #
  ## Verify the patch can apply
  a = apply --index
  ## Skip binary files
  g = grep -I

  # Information #
  branches = for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short), last updated %(committerdate:relative) by %(authorname)'
  contributors = shortlog --summary --numbered
	contributors-recurse = "!count-commits"
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  list-changed = ls-files -m
  lc = ls-files -m
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

  # Conflict Resolution #
  theirs = "!f() { git checkout --theirs --global && git add --global; }; f"
  ours = "!f() { git checkout --ours --global && git add --global; }; f"

  # Patch Workflow
  drupal-diff = diff --relative
  dd = diff --relative

  # Power Tools #
  ## Edit all changed files.
  edit = "!$GIT_EDITOR $(git list-changed)"
  ## Resets the repository as firmly as possible. Next step is a new clone.
  super-clean = "!sc() { cd `git rev-parse --show-toplevel` && git clean -fd && git reset --hard HEAD && cd -; }; sc"
  ## Ditch merged branches, other than master, develop, or release.
  clean-branches = "!git branch --merged | grep  -v '\\*\\|master\\|develop\\|release' | xargs -n 1 git branch -d"

  # Unused or Broken
  ## Reminder to fix these, or reread their documentation a few more times.
  merged = branch --merged origin/master -a
  assume = update-index --assume-unchanged
  assumed = !git ls-files -v | grep ^h | cut -c 3-
  unassume = update-index --no-assume-unchanged
  lf = show --pretty=\"format:\" --name-only
  list-files = show --pretty=\"format:\" --name-only
  lg = log -p
[apply]
  whitespace = fix
[branch]
  autosetuprebase = always
  remote = origin
[branch "master"]
  merge = refs/heads/master
  remote = origin
[color]
  diff = true
  branch = true
  ui = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = green
  changed = yellow
  untracked = red
[core]
  autocrlf = input
  whitespace = blank-at-eol,blank-at-eof,trailing-space,tab-in-indent
  excludesfile = ~/.gitignore
  safecrlf = false
[diff]
  renames = copies
  algorithm = patience
[grep]
  lineNumber = true
[include]
  path = .gitconfig.local
[merge]
  log = true
# git clone gh:<user>/<repo>
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
# git clone my:<repo>
[url "git@github.com:grayside/"]
  insteadOf = "my:"
  pushInsteadOf = "grayside:"
  pushInsteadOf = "git://github.com/grayside"
[url "git://github.com/grayside/"]
  insteadOf = "grayside:"
# git clone gst:<user>/<repo>
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"
# git clone bb:<user>/<repo>
[url "git@bitbucket.org:"]
  insteadOf = "bb:"
  pushInsteadOf = "bitbucket:"
  pushInsteadOf = "git://bitbucket.org/"
[url "git://bitbucket.org/"]
  insteadOf = "bitbucket:"
# git clone p2:<repo>
[url "git@bitbucket.org:phase2tech/"]
  insteadOf = "p2:"
  pushInsteadOf = "phase2:"
  pushInsteadOf = "git://bitbucket.org/phase2tech"
[url "git://bitbucket.org/phase2tech/"]
  insteadOf = "phase2:"
